#+title: Embedded Systems with GNU/Linux: Opening the Black Box
#+author: Fabricio Puente Mansilla
#+date: <2025-05-15 Thu>

* Section 1: Introduction & Setting the Stage (Slides 1-5)

** *Slide 1: Title Slide*
    * Title: Embedded Systems with GNU/Linux: Opening the Black Box
    * Fabricio Puente Mansilla
    * Visiontech Consulting Inc. - Canada
    * <2025-05-17 Sat>

** *Slide 2: Welcome & Workshop Goal*
    * Hook: Embedded systems are everywhere! (Show pictures: smart watch, router, car dashboard, industrial control).
    * What is an embedded system? (Simple definition: computer system designed for specific function within a larger system).
    * Workshop Goal: Understand the fundamental concepts behind developing software for these systems, and why the right tools (like GNU/Linux) are essential.

** *Slide 3: Your Daily Software Experience (The "Product" View)*
    * Show icons of common desktop OS (Windows, macOS).
    * Describe the typical user experience:
        * Click-and-install software.
        * Updates happen automatically.
        * Focus on using the application.
        * The operating system is a polished, ready-to-use product.
    * Mention: This is great for usability, but what's hidden?

** *Slide 4: The "Black Box" Problem for Embedded Systems*
    * Metaphor: Using software as a product is like driving a car without knowing how the engine works.
    * Explain: This mindset hides key concepts that are CRITICAL when you have to build software for custom, resource-constrained hardware.
    * Introduce the concepts we'll uncover: Architecture, Cross-Compilation, Source Code, Package Management, Version Control Systems.

** *Slide 5: Why Embedded Systems Demand Deeper Understanding*
    * Limited resources (CPU, RAM, storage).
    * Diverse hardware (not just x86).
    * Need for customization and optimization.
    * Often no screen/keyboard - different deployment methods.
    * You are the builder, not just the user.

* Section 2: Unpacking the Hidden Concepts (Slides 6-10)

** *Slide 6: Concept 1: Architecture Compatibility*
    * What is a CPU architecture? (x86, ARM, RISC-V - explain simply).
    * Show images/diagrams of different chip types.
    * Why does it matter? Software compiled for one architecture *usually* won't run on another.
    * In embedded: You *must* target the specific chip's architecture.

** *Slide 7: Concept 2: Cross-Compilation*
    * Define: Compiling code on one machine (the "host") to run on a different machine (the "target").
    * Why needed for embedded? (Target might be too slow/small, or have a different architecture than your powerful development machine).
    * Simple diagram: Host PC -> Compiler -> Target Binary -> Embedded Device.
    * Contrast with Native Compilation (compiling and running on the same machine).

** *Slide 8: Concept 3: Source Code & The Build Process*
    * What is source code? (Human-readable instructions).
    * Why is access important in embedded? (Customization, debugging low-level issues, understanding hardware interaction).
    * GitHub, GitLab
    * Basic Build Process: Source Code -> Compiler -> Object Files -> Linker -> Executable/Library.

** *Slide 9: Concept 4: Package Management & Dependencies*
    * What is a software package? (Bundled files, executables, libraries).
    * What are dependencies? (Software A needs Library B to run).
    * Explain the challenge: Managing many software components and their interdependencies manually is complex.
    * How desktop OS often hide this (bundled installers). Why that's not enough for building a whole embedded OS/system.

** *Slide 10: Recap - The Gap*
    * Summarize: The "software as a product" model doesn't prepare you for these concepts, which are fundamental in embedded systems.

* Section 3: GNU/Linux: The Development Playground (Slides 11-14)

** Slide 11: Introducing GNU/Linux
    * Brief history/philosophy: Open source, transparency, control.
    * Not just a desktop OS, but a powerful toolkit for developers.
    * Contrast user experience: Command line, file system visibility, configuration files.

** *Slide 12: How Linux Exposes the Concepts*
    * Architecture: You see it in package names (~.deb~ for ~armhf~, ~amd64~), kernel versions.
    * Compilation: Compiling from source is a common task. You interact with compilers, makefiles.
    * Source Code: Readily available for kernel, tools, libraries. You're encouraged to look.
    * Package Management (~apt~, ~yum~, etc.): Explain how they manage dependencies explicitly, resolving conflicts, installing build tools.

** *Slide 13: Why GNU/Linux is Ideal for Embedded Development*
    * Access to essential open-source tools (GCC, GDB, Make, CMake, etc.).
    * Strong community support for embedded Linux development.
    * Flexibility to build custom systems.
    * Many embedded targets *run* Linux (like Raspberry Pi, NVIDIA Jetsons, Orage Pi, etc.).

** Slide 14: Bridging the Gap
    * Using GNU/Linux helps you move from consumer to creator/developer.
    * You gain the necessary vocabulary, workflows and practical experience.

* Section 4: Demo Time! Setting up for Cross-Compilation (Slides 15 - Demo Duration)

** *Slide 15: Demo Introduction: Our Mission*
    * Goal: Set up our Ubuntu machine (Host, x86) to compile software for a Orange Pi (Target, ARM).
    * This is a practical example of cross-compilation and using Linux tools/package management.
    * Note: We won't compile the *entire* Raspbian/RPi OS, but we'll install the *tools required* and show how to use them on a simple example.

** *Slide 16: The Tools We Need*
    * Cross-compiler toolchain (e.g., ~gcc-arm-linux-gnueabihf~).
    * Necessary libraries and headers for the target architecture.
    * Mention these are available as packages in Ubuntu's repositories.

** *Slide 17: Step 1: Install the Toolchain (Live/Recorded Demo)*
    * Show opening a terminal.
    * Show the command: ~sudo apt update~ (Explain why).
    * Show the command: ~sudo apt install crossbuild-essential-armhf~ (or the specific package name that pulls in the ARM hard-float toolchain).
    * Explain what ~apt~ is doing: Downloading packages, resolving dependencies, installing files. Connect back to "Package Management".

** *Slide 18: Step 2: Prepare Source Code (Live/Recorded Demo)*
    * Navigate to a demo directory.
    * Create a simple C "Hello World" program (e.g., ~hello.c~).
    * Briefly explain the C code.

** *Slide 19: Step 3: Cross-Compiling! (Live/Recorded Demo)*
    * Show the cross-compilation command:
        * ~arm-linux-gnueabihf-gcc hello.c -o hello_pi~
    * Explain the command:
        * ~arm-linux-gnueabihf-gcc~: This is the *cross-compiler* executable (note the prefix indicating the target).
        * ~hello.c~: Input source file.
        * ~-o hello_pi~: Output executable name.
    * Show the output executable file (~hello_pi~).
    * Explain: This file is now compiled for ARM and *will not run* on our Ubuntu x86 machine directly.

** *Slide 20: (Optional) Verifying the Output / Running on Target (Show & Tell)*
    * (If possible/time permits) Show ~file hello_pi~ output to demonstrate it's an ARM executable.
    * (Show image/short video) How you would transfer ~hello_pi~ to a Raspberry Pi and run it there. Emphasize this is the *deployment* step.

* Section 5: Reflecting on the Demo & Next Steps (Slides 21-24)

** *Slide 21: Connecting the Demo Back to Concepts*
    * We *cross-compiled* (Slide 19).
    * We targeted a specific *architecture* (ARM HF) (Slide 17, 19).
    * We worked with *source code* (Slide 18).
    * We used *package management* (~apt~) to get our tools (Slide 17).
    * Contrast again: How would you do *any* of this on a standard "product" OS without installing significant developer environments?

** *Slide 22: Beyond This Demo*
    * Mention that compiling a full OS involves build systems (Buildroot, Yocto - high level).
    * Briefly touch on bootloaders, kernels (Linux), root filesystems.
    * All these steps rely heavily on the concepts and tools available in a GNU/Linux environment.

** *Slide 23: Where to Go From Here?*
    * Encourage them to install GNU/Linux (Ubuntu, Fedora, etc.).
    * Explore the command line.
    * Look into embedded Linux resources (Raspberry Pi documentation, Buildroot/Yocto documentation).
    * Suggest projects (simple LED blink on Pi via SSH, controlling GPIO, kernel modules).

** *Slide 24: Q&A and Conclusion*
    * Summarize the main takeaway: Embracing GNU/Linux unlocks a deeper understanding of computing and is fundamental for embedded systems development.
    * Thank You!
    * Open floor for Questions.
